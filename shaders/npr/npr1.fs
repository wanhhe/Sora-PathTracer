#version 330 core
out vec4 FragColor;
in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform sampler2D ilmTexture;
uniform sampler2D texture_diffuse1;
uniform sampler2D sdfMap;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform vec3 _AmbientColor;
uniform vec3 _LightColor;
uniform vec3 _SpecularColor;
uniform float _SpecularRange;
uniform vec3 _RimColor;
uniform float _RimAmount;
uniform float _MinRim;
uniform float _MaxRim;
void main() {
   vec3 color = texture(texture_diffuse1, TexCoords).rgb;
   vec3 ilmTex = texture(ilmTexture, TexCoords).rgb;
   vec3 normal = normalize(Normal);
   if(!gl_FrontFacing) normal = -normal;
   vec3 viewDir = normalize(viewPos - FragPos);
   vec3 lightDir = normalize(lightPos - FragPos);
   float NdotL = max(dot(normal, lightDir), 0);
   float wrapLambert = NdotL + ilmTex.g;
   float shadowStep = smoothstep(0.9, 0.95, wrapLambert);
   vec3 shadow = mix(_AmbientColor, _LightColor, shadowStep);
   vec3 halfwayDir = normalize(lightDir + viewDir);
   float spec = pow(max(dot(normal, halfwayDir), 0), 128);
   float specularRange = step(_SpecularRange, (spec + clamp(dot(normal.xz, lightDir.xz), 0.0, 1.0)) * ilmTex.r * ilmTex.b);
   vec3 specular = specularRange * _SpecularColor;
   vec3 Front = vec3(0, 0, -1.0);
   float rimDot = 1 - clamp(dot(viewDir, normal), 0.0, 1.0);
   rimDot = smoothstep(_MinRim, _MaxRim, rimDot);
   float rimIntensity = rimDot * clamp(dot(-Front.xz, lightDir.xz), 0.0, 1.0);
   rimIntensity = smoothstep(_RimAmount - 0.3, _RimAmount + 0.1, rimIntensity);
   if (dot(normal, Front) < 0) rimIntensity = 0.0;
//"   vec3 rimColor = rimIntensity * _LightColor;
   vec3 rimColor = rimIntensity * _RimColor;
   vec4 sdfIlm = texture(sdfMap, TexCoords);
   vec4 r_sdfIlm = texture(sdfMap, vec2(1 - TexCoords.x, TexCoords.y));
   vec3 Left = normalize(vec3(1,0,0));
   vec3 Right = -Left;
   float ctrl = step(0, dot(Front.xz, lightDir.xz));
   float faceShadow = ctrl * min(step(dot(Left.xz, lightDir.xz), r_sdfIlm.r), step(dot(Right.xz, lightDir.xz), sdfIlm.r));
   vec3 diffuse = mix(_AmbientColor, _LightColor, faceShadow);
//"   float ctrl = 1 - clamp(dot(Front, lightDir) * 0.5 + 0.5, 0.0, 1.0);
//"   float ilm = dot(lightDir, Left) > 0 ? sdfIlm.r : r_sdfIlm.r;
//"   float isShadow = step(ilm, ctrl);
//"   float bias = smoothstep(0.6, 0.8, abs(ctrl - ilm));
//"   vec3 diffuse = color;
//"   if (ctrl > 0.99 || isShadow == 1) diffuse = mix_LightColor, _AmbientColor ,bias);
//"   vec3 lighting = rimColor + (shadow + specular) * color;
   vec3 lighting = (rimColor + diffuse + specular) * color;
   FragColor = vec4(lighting , 1.0);
   if (_SpecularColor.z <= 0) FragColor = vec4(1.0);
//"   FragColor = vec4(mix(_AmbientColor, _LightColor, shadowStep), 1.0);
//"   FragColor = vec4(specular, 1.0);
//"   if (spec == 0) FragColor = vec4(0.5, 0, 0, 1.0);
//"   if (ilmTex.r == 0 || ilmTex.b == 0) FragColor = vec4(0, 0.5, 0, 1.0);
//"   if (rimColor.x > 0.2 || rimColor.y > 0.2 || rimColor.z > 0.2) FragColor = vec4(0.5, 0, 0, 1.0);
//"   if (NdotL > 0) FragColor = vec4(0.5, 0, 0, 1.0);
//"   if(!gl_FrontFacing) FragColor = vec4(0.5, 0, 0, 1.0);
//"   if (dot(vec2(0, 1), lightDir.xz) < 0) FragColor = vec4(0.5, 0, 0, 1.0);
//"   if (sdfIlm.x > 0.7) FragColor = vec4(0.5, 0, 0, 1.0);
}